apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "io.github.jeadyx.sonatype-uploader"
apply plugin: "org.jetbrains.dokka"

ext {
    artifact = 'ImgCompressPlugin'
    libraryName = 'ImgCompressPlugin'
    libraryDescription = 'An Android gradle plugin that scans the resource directory in the project and performs batch image compression.'
    libraryVersion = version
}

tasks.register('dokkaJavadocJar', Jar) {
    dependsOn(tasks.named("dokkaJavadoc"))
    from(tasks.named("dokkaJavadoc"))
    archiveClassifier.set("javadoc")
}
publishing {
    publications {
        create("mavenTest", MavenPublication) {
            artifactId = artifact
            from(components["java"])
            artifact(tasks.getByName("dokkaJavadocJar"))
            pom {
                name.set(libraryName)
                description.set(libraryDescription)
                url.set(siteUrl)
                properties = [
                    "myProp": "value",
                    "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name.set('The Apache License, Version 2.0')
                        url.set('http://www.apache.org/licenses/LICENSE-2.0.txt')
                    }
                }

                developers {
                    developer {
                        id.set(developerId)
                        name.set(developerName)
                        email.set(developerEmail)
                    }
                }

                scm {
                    connection.set(gitUrl)
                    developerConnection.set(gitUrl)
                    url.set(siteUrl)
                }
            }
        }
    }
    repositories {
        maven {
            name = libraryName
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl =layout.buildDirectory.dir('repos/snapshots')
            def uploadDir = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            url = uri(uploadDir.get().asFile.path)
        }
    }
}
signing{
    sign(publishing.publications.mavenTest)
}

sonatypeUploader {
    def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
    def snapshotsRepoUrl =layout.buildDirectory.dir('repos/snapshots')
    def uploadDir = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    dir = uploadDir.get().asFile.path
    tokenName = ossrhUsername
    tokenPasswd = ossrhPassword
}